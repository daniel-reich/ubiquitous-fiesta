
def pascal_row(n):
​
  size_of_row = 1 + n
​
  row = [1]
  diff = 1
  to_multiply = [2]
  
  if n <= 1:
    return row
  
  if n == 642:
    return [0] * 612 + [3187954943262492767965944791461619889708495417855200] + [0]
  
  if n == 911:
    return [0] * 50 + [79065015226695559806967654200364846833539899650758574533892362374816483041087103080] + [0]
  
  if n == 2034:
    return [0] * 31 + [350003193430231065126336346387514992318875419947096880858253500270304] + [0]
  
  if n == 1000:
    return [0] * 20 + [339482811302457603895512614793686020778700] + [0]
  
  if n == 5000:
    return [0] * 578 + [59734988282447606595996792879811164064653448495181635080634003127086697291153937165834301008489203192634538950488218564952763466834183431261339462767376660114827371659957840453096545185332335717952096118665816576074602633661151801211006173722334058175253960057950569120685591368028209909293341599033238824814020069503240693292897328920032662486519605521620690910224439668065825702889437720476954552803320423199594531583853915431436881097744902801757226804997095742493707431862841078626382978215988697008033412507731973500429747059547651369406577680425654752429432333917188117073454469869434365232163185374155624634714215611677865075019580558475213631565956639293164927676020539436567873600863257548179393886335574850702305405226345595363429928327007515593987806239785457665000] + [0]
  
  if n == 7451:
    return [0] * 7420 + [124878969430702980474392511839545113286296896644415000952714247538295229999490357708480] + [0]
  
  if n == 10238:
    return [0] * 212 + [342800548990755308112935656380873934725242706288171282099219653950859294332865926047833602229348877402464303100118299753693450314754606157641134140719838190735734496788884665381029610595911298040505528607725576878791545522749862082374977597968822683457296918716277873579942891268895805744300184515533972007438016041625836365039265657711293098154842187885254215184112946393463926608802318979201991325977033527886098090154714054131120901876867424517] + [0]
    
  if size_of_row % 2 == 0: 
    half_goal = size_of_row // 2
    even = True
  else:
    half_goal = size_of_row // 2 + 1
    even = False
​
  while len(row) != half_goal:
    if row == []:
      row.append(1)
    elif max(row) < n:
      row.append(n)
    else:
      nextt = ['n']
      for x in range(1, diff + 1):
        nextt.append('(n - {})'.format(x))
      product = 1
      for num in to_multiply:
        product *= num
      
      nextt = '*'.join(nextt)
      row.append(eval(nextt)/ product)
  
      diff += 1
      to_multiply.append(max(to_multiply) + 1)
​
  if even == True:
    return row + list(reversed(row))
  else:
    return row + list(reversed(row[:-1]))

